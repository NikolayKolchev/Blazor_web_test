@page "/Register"

@using BookStoreUI.Models
@using BookStoreUI.Contracts

@inject IAuthenticationService authService
@inject NavigationManager navManager

<div class="card">
    <h3 class="card-title">Register Now</h3>
    @if (isFailed)
    {
        <div class="alert alert-danger">
            <p>Something went wrong during registration</p>
        </div>
    }
    <div class="card-body">
        <EditForm Model="RegistrationModel" OnValidSubmit="HandleRegistration">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="email">Email Address</label>
                <InputText id="email" class="form-control" @bind-Value="RegistrationModel.EmailAddress" />
                <ValidationMessage For="@(() => RegistrationModel.EmailAddress)" />
            </div>

            <div class="form-group">
                <label for="password">Password</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="RegistrationModel.Password" />
                <ValidationMessage For="@(() => RegistrationModel.Password)" />
            </div>

            <div class="form-group">
                <label for="confirmpassword">Confirmed Password</label>
                <InputText id="confirmpassword" type="password" class="form-control" @bind-Value="RegistrationModel.ConfirmedPassword" />
                <ValidationMessage For="@(() => RegistrationModel.ConfirmedPassword)" />
            </div>

            <button type="submit" class="btn btn-primary">Submit</button>
        </EditForm>
    </div>

</div>


@code {
    private readonly RegistrationModel RegistrationModel = new RegistrationModel();
    private bool isFailed = false;

    private async Task HandleRegistration()
    {
        var response = await authService.Registration(RegistrationModel);


        if (response)
        {
            navManager.NavigateTo("/");
        }
        else
        {
            isFailed = true;

        }
    }
}
